s.mat[,5]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*sen,           spe^4*(1-sen)*sen,    spe^4*(1-sen)^2*sen,  spe^4*(1-sen)^3, spe^(1:3), spe^4*(1-sen)^(0:2))
s.mat[,6]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*sen,            spe^5*(1-sen)*sen,    spe^5*(1-sen)^2, spe^(1:4), spe^5*(1-sen)^(0:1))
s.mat[,7]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*(1-spe),        spe^6*sen,            spe^6*(1-sen),   spe^(1:5), spe^6)
s.mat[,8]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*(1-spe),        spe^6*(1-spe),        spe^7,           spe^(1:5), spe^6)
s.mat=t(t(s.mat*r.vec)*q.vec)
final_array<-n*apply(s.mat, 1, sum)
final_array
pi<-mean(rbinom(n,1,pi_t))
p<-mean(rbinom(n,1,p_t))
r<-mean(rbinom(n,1,r_t))
q.vec=c(pi, (1-pi)*p, (1-pi)*(1-p)^(1:5)*p, (1-pi)*(1-p)^6)
r.vec=c((1-r)^c((0:6), 6), r*(1-r)^(0:5))
s.mat=matrix(NA, 14, 8)
s.mat[,1]=c(sen,    (1-sen)*sen,   (1-sen)^2*sen,   (1-sen)^3*sen,     (1-sen)^4*sen,       (1-sen)^5*sen,        (1-sen)^6*sen,       (1-sen)^7,                   spe^0*(1-sen)^(1:6))
s.mat[,2]=c(1-spe,  spe*sen,       spe*(1-sen)*sen, spe*(1-sen)^2*sen, spe*(1-sen)^3*sen,   spe*(1-sen)^4*sen,    spe*(1-sen)^5*sen,    spe*(1-sen)^6,              spe^1*(1-sen)^(0:5))
s.mat[,3]=c(1-spe,  spe*(1-spe),   spe^2*sen,       spe^2*(1-sen)*sen, spe^2*(1-sen)^2*sen, spe^2*(1-sen)^3*sen,  spe^2*(1-sen)^4*sen,  spe^2*(1-sen)^5, spe,       spe^2*(1-sen)^(0:4))
s.mat[,4]=c(1-spe,  spe*(1-spe),   spe^2*(1-spe),   spe^3*sen,         spe^3*(1-sen)*sen,   spe^3*(1-sen)^2*sen,  spe^3*(1-sen)^3*sen,  spe^3*(1-sen)^4, spe^(1:2), spe^3*(1-sen)^(0:3))
s.mat[,5]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*sen,           spe^4*(1-sen)*sen,    spe^4*(1-sen)^2*sen,  spe^4*(1-sen)^3, spe^(1:3), spe^4*(1-sen)^(0:2))
s.mat[,6]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*sen,            spe^5*(1-sen)*sen,    spe^5*(1-sen)^2, spe^(1:4), spe^5*(1-sen)^(0:1))
s.mat[,7]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*(1-spe),        spe^6*sen,            spe^6*(1-sen),   spe^(1:5), spe^6)
s.mat[,8]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*(1-spe),        spe^6*(1-spe),        spe^7,           spe^(1:5), spe^6)
s.mat=t(t(s.mat*r.vec)*q.vec)
final_array<-n*apply(s.mat, 1, sum)
final_array
dat_czi<-readRDS("C:/Users/yweng/Documents/Working/COVID_CZI/Codes/mlelabperform/sesp.rds")
table(dat_czi$primary_last_visit,dat_czi$primary_case)
table(dat_czi$primary_last_visit,dat_czi$type)
dat_czi_case<-dat_czi[dat_czi$primary_case==1,]
input_dat<-ddply(dat_czi,~type,summarise,n_w=sum(pswt,na.rm=T),n_uw=length(record_id),.drop=F)
library(plyr)
dat_czi<-readRDS("C:/Users/yweng/Documents/Working/COVID_CZI/Codes/mlelabperform/sesp.rds")
table(dat_czi$primary_last_visit,dat_czi$primary_case)
table(dat_czi$primary_last_visit,dat_czi$type)
dat_czi_case<-dat_czi[dat_czi$primary_case==1,]
input_dat<-ddply(dat_czi,~type,summarise,n_w=sum(pswt,na.rm=T),n_uw=length(record_id),.drop=F)
input_dat
lofu_function<-function(n){
rhat<-sum(n[9:14])/(n[2]+2*n[3]+3*n[4]+4*n[5]+5*n[6]+6*n[7]+6*n[8]+n[10]+2*n[11]+3*n[12]+4*n[13]+5*n[14])
return(rhat)
}
lofu_function(input_dat$n_w)
logit(0.5)
pi<-0.07
p<-0.02
nk=4000
se<-0.9
sp<-0.999
dpi1<-c(1,-p*((1-p)^c(0:5)),-(1-p)^6)
dp1<-c(0,-pi, (1-pi)*(1-2*p),(1-pi)*(1-p)*(1-3*p),
(1-pi)*((1-p)^2)*(1-4*p),
(1-pi)*((1-p)^3)*(1-5*p),
(1-pi)*((1-p)^4)*(1-6*p),
-6*(1-pi)*((1-p)^5))
dpi2<-rep(0,8)
dp2<-c(0,0, -2*(1-pi),-2*(1-pi)*(2-3*p),
-6*(1-pi)*(1-2*p),-4*(1-pi)*((1-p)^2)*(2-5*p),
-10*(1-pi)*((1-p)^3)*(1-3*p),
30*(1-pi)*((1-p)^4))
dpip2<-c(0,-1,1-2*p, (1-p)*(3*p-1),((1-p)^2)*(4*p-1),
((1-p)^3)*(5*p-1),((1-p)^4)*(6*p-1),
6*((1-p)^5))
x_matrix<-xmatrix_function(se=se, sp=sp,nk=nk)
q.vec=c(pi, (1-pi)*p, (1-pi)*(1-p)^(1:5)*p, (1-pi)*(1-p)^6)
##derivatives of the pk
dpkpi1<-apply(t(x_matrix*dpi1),1,sum,na.rm=T)
dpkp1<-apply(t(x_matrix*dp1),1,sum,na.rm=T)
dpkpi2<-apply(t(x_matrix*dpi2),1,sum,na.rm=T)
dpkp2<-apply(t(x_matrix*dp2),1,sum,na.rm=T)
dpkpip2<-apply(t(x_matrix*dpip2),1,sum,na.rm=T)
##pk
pk<-apply(x_matrix*q.vec,2,sum,na.rm=T)
##derivatives of the likelihood function
dLpi2<-sum(nk*(dpkpi2*(1/pk)-(dpkpi1^2)*(1/(pk^2))))
dLp2<-sum(nk*(dpkp2*(1/pk)-(dpkp1^2)*(1/(pk^2))))
dLpip2<-sum(nk*(dpkpip2*(1/pk)-(dpkp1)*(dpkpi1)*(1/(pk^2))))
##Fisher's information matrix
I<-matrix(c(-dLpi2,-dLpip2,-dLpip2,-dLp2),nrow=2)
I_inverse<-solve(I)
varpi<-I_inverse[1,1]
varp<-I_inverse[2,2]
logit<-function(k){log(k/(1-k))}
xmatrix_function<-function(se, sp, nk){
rhat<-lofu_function(nk)
r.vec=c((1-rhat)^c((0:6), 6), rhat*(1-rhat)^(0:5))
s.mat=matrix(NA, 14, 8)
s.mat[,1]=c(se,    (1-se)*se,   (1-se)^2*se,   (1-se)^3*se,     (1-se)^4*se,       (1-se)^5*se,        (1-se)^6*se,       (1-se)^7,                   sp^0*(1-se)^(1:6))
s.mat[,2]=c(1-sp,  sp*se,       sp*(1-se)*se, sp*(1-se)^2*se, sp*(1-se)^3*se,   sp*(1-se)^4*se,    sp*(1-se)^5*se,    sp*(1-se)^6,              sp^1*(1-se)^(0:5))
s.mat[,3]=c(1-sp,  sp*(1-sp),   sp^2*se,       sp^2*(1-se)*se, sp^2*(1-se)^2*se, sp^2*(1-se)^3*se,  sp^2*(1-se)^4*se,  sp^2*(1-se)^5, sp,       sp^2*(1-se)^(0:4))
s.mat[,4]=c(1-sp,  sp*(1-sp),   sp^2*(1-sp),   sp^3*se,         sp^3*(1-se)*se,   sp^3*(1-se)^2*se,  sp^3*(1-se)^3*se,  sp^3*(1-se)^4, sp^(1:2), sp^3*(1-se)^(0:3))
s.mat[,5]=c(1-sp,  sp*(1-sp)  , sp^2*(1-sp),   sp^3*(1-sp),     sp^4*se,           sp^4*(1-se)*se,    sp^4*(1-se)^2*se,  sp^4*(1-se)^3, sp^(1:3), sp^4*(1-se)^(0:2))
s.mat[,6]=c(1-sp,  sp*(1-sp)  , sp^2*(1-sp),   sp^3*(1-sp),     sp^4*(1-sp),       sp^5*se,            sp^5*(1-se)*se,    sp^5*(1-se)^2, sp^(1:4), sp^5*(1-se)^(0:1))
s.mat[,7]=c(1-sp,  sp*(1-sp)  , sp^2*(1-sp),   sp^3*(1-sp),     sp^4*(1-sp),       sp^5*(1-sp),        sp^6*se,            sp^6*(1-se),   sp^(1:5), sp^6)
s.mat[,8]=c(1-sp,  sp*(1-sp)  , sp^2*(1-sp),   sp^3*(1-sp),     sp^4*(1-sp),       sp^5*(1-sp),        sp^6*(1-sp),        sp^7,           sp^(1:5), sp^6)
s.mat=t(s.mat*r.vec)
return(s.mat)
}
dpi1<-c(1,-p*((1-p)^c(0:5)),-(1-p)^6)
dp1<-c(0,-pi, (1-pi)*(1-2*p),(1-pi)*(1-p)*(1-3*p),
(1-pi)*((1-p)^2)*(1-4*p),
(1-pi)*((1-p)^3)*(1-5*p),
(1-pi)*((1-p)^4)*(1-6*p),
-6*(1-pi)*((1-p)^5))
dpi2<-rep(0,8)
dp2<-c(0,0, -2*(1-pi),-2*(1-pi)*(2-3*p),
-6*(1-pi)*(1-2*p),-4*(1-pi)*((1-p)^2)*(2-5*p),
-10*(1-pi)*((1-p)^3)*(1-3*p),
30*(1-pi)*((1-p)^4))
dpip2<-c(0,-1,1-2*p, (1-p)*(3*p-1),((1-p)^2)*(4*p-1),
((1-p)^3)*(5*p-1),((1-p)^4)*(6*p-1),
6*((1-p)^5))
x_matrix<-xmatrix_function(se=se, sp=sp,nk=nk)
q.vec=c(pi, (1-pi)*p, (1-pi)*(1-p)^(1:5)*p, (1-pi)*(1-p)^6)
##derivatives of the pk
dpkpi1<-apply(t(x_matrix*dpi1),1,sum,na.rm=T)
dpkp1<-apply(t(x_matrix*dp1),1,sum,na.rm=T)
dpkpi2<-apply(t(x_matrix*dpi2),1,sum,na.rm=T)
dpkp2<-apply(t(x_matrix*dp2),1,sum,na.rm=T)
dpkpip2<-apply(t(x_matrix*dpip2),1,sum,na.rm=T)
##pk
pk<-apply(x_matrix*q.vec,2,sum,na.rm=T)
##derivatives of the likelihood function
dLpi2<-sum(nk*(dpkpi2*(1/pk)-(dpkpi1^2)*(1/(pk^2))))
dLp2<-sum(nk*(dpkp2*(1/pk)-(dpkp1^2)*(1/(pk^2))))
dLpip2<-sum(nk*(dpkpip2*(1/pk)-(dpkp1)*(dpkpi1)*(1/(pk^2))))
##Fisher's information matrix
I<-matrix(c(-dLpi2,-dLpip2,-dLpip2,-dLp2),nrow=2)
I_inverse<-solve(I)
varpi<-I_inverse[1,1]
varp<-I_inverse[2,2]
logit<-function(k){log(k/(1-k))}
p
pi
varp
varpi
se<-0.99
sp<-0.999
dpi1<-c(1,-p*((1-p)^c(0:5)),-(1-p)^6)
dp1<-c(0,-pi, (1-pi)*(1-2*p),(1-pi)*(1-p)*(1-3*p),
(1-pi)*((1-p)^2)*(1-4*p),
(1-pi)*((1-p)^3)*(1-5*p),
(1-pi)*((1-p)^4)*(1-6*p),
-6*(1-pi)*((1-p)^5))
dpi2<-rep(0,8)
dp2<-c(0,0, -2*(1-pi),-2*(1-pi)*(2-3*p),
-6*(1-pi)*(1-2*p),-4*(1-pi)*((1-p)^2)*(2-5*p),
-10*(1-pi)*((1-p)^3)*(1-3*p),
30*(1-pi)*((1-p)^4))
dpip2<-c(0,-1,1-2*p, (1-p)*(3*p-1),((1-p)^2)*(4*p-1),
((1-p)^3)*(5*p-1),((1-p)^4)*(6*p-1),
6*((1-p)^5))
x_matrix<-xmatrix_function(se=se, sp=sp,nk=nk)
q.vec=c(pi, (1-pi)*p, (1-pi)*(1-p)^(1:5)*p, (1-pi)*(1-p)^6)
##derivatives of the pk
dpkpi1<-apply(t(x_matrix*dpi1),1,sum,na.rm=T)
dpkp1<-apply(t(x_matrix*dp1),1,sum,na.rm=T)
dpkpi2<-apply(t(x_matrix*dpi2),1,sum,na.rm=T)
dpkp2<-apply(t(x_matrix*dp2),1,sum,na.rm=T)
dpkpip2<-apply(t(x_matrix*dpip2),1,sum,na.rm=T)
##pk
pk<-apply(x_matrix*q.vec,2,sum,na.rm=T)
##derivatives of the likelihood function
dLpi2<-sum(nk*(dpkpi2*(1/pk)-(dpkpi1^2)*(1/(pk^2))))
dLp2<-sum(nk*(dpkp2*(1/pk)-(dpkp1^2)*(1/(pk^2))))
dLpip2<-sum(nk*(dpkpip2*(1/pk)-(dpkp1)*(dpkpi1)*(1/(pk^2))))
##Fisher's information matrix
I<-matrix(c(-dLpi2,-dLpip2,-dLpip2,-dLp2),nrow=2)
I_inverse<-solve(I)
varpi<-I_inverse[1,1]
varp<-I_inverse[2,2]
varo
varp
varpi
I_inverse
pi
p
dpi1<-c(1,-p*((1-p)^c(0:5)),-(1-p)^6)
dp1<-c(0,-pi, (1-pi)*(1-2*p),(1-pi)*(1-p)*(1-3*p),
(1-pi)*((1-p)^2)*(1-4*p),
(1-pi)*((1-p)^3)*(1-5*p),
(1-pi)*((1-p)^4)*(1-6*p),
-6*(1-pi)*((1-p)^5))
dpi2<-rep(0,8)
dp2<-c(0,0, -2*(1-pi),-2*(1-pi)*(2-3*p),
-6*(1-pi)*(1-2*p),-4*(1-pi)*((1-p)^2)*(2-5*p),
-10*(1-pi)*((1-p)^3)*(1-3*p),
30*(1-pi)*((1-p)^4))
dpip2<-c(0,-1,1-2*p, (1-p)*(3*p-1),((1-p)^2)*(4*p-1),
((1-p)^3)*(5*p-1),((1-p)^4)*(6*p-1),
6*((1-p)^5))
x_matrix<-xmatrix_function(se=se, sp=sp,nk=nk)
q.vec=c(pi, (1-pi)*p, (1-pi)*(1-p)^(1:5)*p, (1-pi)*(1-p)^6)
q.vec
dpkpi1<-apply(t(x_matrix*dpi1),1,sum,na.rm=T)
dpkp1<-apply(t(x_matrix*dp1),1,sum,na.rm=T)
dpkpi2<-apply(t(x_matrix*dpi2),1,sum,na.rm=T)
dpkp2<-apply(t(x_matrix*dp2),1,sum,na.rm=T)
dpkpip2<-apply(t(x_matrix*dpip2),1,sum,na.rm=T)
##pk
pk<-apply(x_matrix*q.vec,2,sum,na.rm=T)
##derivatives of the likelihood function
dLpi2<-sum(nk*(dpkpi2*(1/pk)-(dpkpi1^2)*(1/(pk^2))))
dLp2<-sum(nk*(dpkp2*(1/pk)-(dpkp1^2)*(1/(pk^2))))
dLpip2<-sum(nk*(dpkpip2*(1/pk)-(dpkp1)*(dpkpi1)*(1/(pk^2))))
dpkpi1
I<-matrix(c(-dLpi2,-dLpip2,-dLpip2,-dLp2),nrow=2)
I_inverse<-solve(I)
varpi<-I_inverse[1,1]
varp<-I_inverse[2,2]
I_inverse
I
SE
se
spe
sp
x_matrix
se
sp
nk
rhat<-lofu_function(nk)
r.vec=c((1-rhat)^c((0:6), 6), rhat*(1-rhat)^(0:5))
s.mat=matrix(NA, 14, 8)
s.mat
s.mat[,1]=c(se,    (1-se)*se,   (1-se)^2*se,   (1-se)^3*se,     (1-se)^4*se,       (1-se)^5*se,        (1-se)^6*se,       (1-se)^7,                   sp^0*(1-se)^(1:6))
s.mat[,2]=c(1-sp,  sp*se,       sp*(1-se)*se, sp*(1-se)^2*se, sp*(1-se)^3*se,   sp*(1-se)^4*se,    sp*(1-se)^5*se,    sp*(1-se)^6,              sp^1*(1-se)^(0:5))
s.mat[,3]=c(1-sp,  sp*(1-sp),   sp^2*se,       sp^2*(1-se)*se, sp^2*(1-se)^2*se, sp^2*(1-se)^3*se,  sp^2*(1-se)^4*se,  sp^2*(1-se)^5, sp,       sp^2*(1-se)^(0:4))
s.mat[,4]=c(1-sp,  sp*(1-sp),   sp^2*(1-sp),   sp^3*se,         sp^3*(1-se)*se,   sp^3*(1-se)^2*se,  sp^3*(1-se)^3*se,  sp^3*(1-se)^4, sp^(1:2), sp^3*(1-se)^(0:3))
s.mat[,5]=c(1-sp,  sp*(1-sp)  , sp^2*(1-sp),   sp^3*(1-sp),     sp^4*se,           sp^4*(1-se)*se,    sp^4*(1-se)^2*se,  sp^4*(1-se)^3, sp^(1:3), sp^4*(1-se)^(0:2))
s.mat[,6]=c(1-sp,  sp*(1-sp)  , sp^2*(1-sp),   sp^3*(1-sp),     sp^4*(1-sp),       sp^5*se,            sp^5*(1-se)*se,    sp^5*(1-se)^2, sp^(1:4), sp^5*(1-se)^(0:1))
s.mat[,7]=c(1-sp,  sp*(1-sp)  , sp^2*(1-sp),   sp^3*(1-sp),     sp^4*(1-sp),       sp^5*(1-sp),        sp^6*se,            sp^6*(1-se),   sp^(1:5), sp^6)
s.mat[,8]=c(1-sp,  sp*(1-sp)  , sp^2*(1-sp),   sp^3*(1-sp),     sp^4*(1-sp),       sp^5*(1-sp),        sp^6*(1-sp),        sp^7,           sp^(1:5), sp^6)
s.mat=t(s.mat*r.vec)
s.mat
r.vec
rhat
rhat<-0.3
nk
nk<-input_dat$n_w
dpi1<-c(1,-p*((1-p)^c(0:5)),-(1-p)^6)
dp1<-c(0,-pi, (1-pi)*(1-2*p),(1-pi)*(1-p)*(1-3*p),
(1-pi)*((1-p)^2)*(1-4*p),
(1-pi)*((1-p)^3)*(1-5*p),
(1-pi)*((1-p)^4)*(1-6*p),
-6*(1-pi)*((1-p)^5))
dpi2<-rep(0,8)
dp2<-c(0,0, -2*(1-pi),-2*(1-pi)*(2-3*p),
-6*(1-pi)*(1-2*p),-4*(1-pi)*((1-p)^2)*(2-5*p),
-10*(1-pi)*((1-p)^3)*(1-3*p),
30*(1-pi)*((1-p)^4))
dpip2<-c(0,-1,1-2*p, (1-p)*(3*p-1),((1-p)^2)*(4*p-1),
((1-p)^3)*(5*p-1),((1-p)^4)*(6*p-1),
6*((1-p)^5))
x_matrix<-xmatrix_function(se=se, sp=sp,nk=nk)
q.vec=c(pi, (1-pi)*p, (1-pi)*(1-p)^(1:5)*p, (1-pi)*(1-p)^6)
##derivatives of the pk
dpkpi1<-apply(t(x_matrix*dpi1),1,sum,na.rm=T)
dpkp1<-apply(t(x_matrix*dp1),1,sum,na.rm=T)
dpkpi2<-apply(t(x_matrix*dpi2),1,sum,na.rm=T)
dpkp2<-apply(t(x_matrix*dp2),1,sum,na.rm=T)
dpkpip2<-apply(t(x_matrix*dpip2),1,sum,na.rm=T)
##pk
pk<-apply(x_matrix*q.vec,2,sum,na.rm=T)
##derivatives of the likelihood function
dLpi2<-sum(nk*(dpkpi2*(1/pk)-(dpkpi1^2)*(1/(pk^2))))
dLp2<-sum(nk*(dpkp2*(1/pk)-(dpkp1^2)*(1/(pk^2))))
dLpip2<-sum(nk*(dpkpip2*(1/pk)-(dpkp1)*(dpkpi1)*(1/(pk^2))))
##Fisher's information matrix
I<-matrix(c(-dLpi2,-dLpip2,-dLpip2,-dLp2),nrow=2)
I_inverse<-solve(I)
varpi<-I_inverse[1,1]
varp<-I_inverse[2,2]
logit<-function(k){log(k/(1-k))}
pi
p
varp
varpi
data.frame(parameter=c("prevalence","incidence"),
estimate=c(pi,p),
lower=exp(c(logit(pi)-1.96*sqrt(varpi)/(pi*(1-pi)),
logit(p)-1.96*sqrt(varp)/(p*(1-p)))),
upper=exp(c(logit(pi)+1.96*sqrt(varpi)/(pi*(1-pi)),
logit(p)-1.96*sqrt(varp)/(p*(1-p))))
)
data.frame(parameter=c("prevalence","incidence"),
estimate=c(pi,p),
lower=exp(c(logit(pi)-1.96*sqrt(varpi)/(pi*(1-pi)),
logit(p)-1.96*sqrt(varp)/(p*(1-p)))),
upper=exp(c(logit(pi)+1.96*sqrt(varpi)/(pi*(1-pi)),
logit(p)+1.96*sqrt(varp)/(p*(1-p))))
)
logit(pi)
1.96*sqrt(varpi)/(pi*(1-pi)
)
library("devtools")
library("roxygen2")
create_package("C:/Users/yweng/Documents/Working/COVID_CZI/Packages/mlelabperform")
library("devtools")
install_github("isabelweng/mlelabperform",auth_token = "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",force=T)
library(mlelabperform)
input_dat$n_w
help(mle_ci())
help(mle_ci
)
mle_ci(pi = 0.07, p = 0.02, input_dat$n_w, se=0.9, sp=0.999)
library(mlelabperform)
mle_ci(pi = 0.07, p = 0.02, input_dat$n_w, se=0.9, sp=0.999)
library(mlelabperform)
library(mlelabperform)
mle_ci
help(mle_ci)
library("devtools")
install_github("isabelweng/mlelabperform",auth_token = "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",force=T)
library(mlelabperform)
ls("package:mlelabperform")
mle_ci
mle_ci(pi = 0.07, p = 0.02, nk, se, sp)
install_github("isabelweng/mlelabperform",auth_token = "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",force=T)
detach("package:mlelabperform", unload = TRUE)
install_github("isabelweng/mlelabperform",auth_token = "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",force=T)
library(mlelabperform)
mlelabperform::mle_ci()
func_simulate<-function(n=4000,
sen=0.9 ,##fixed
spe=0.99, ##fixed
pi_t=0.05,
p_t=0.02,
r_t=0.05){
pi<-mean(rbinom(n,1,pi_t))
p<-mean(rbinom(n,1,p_t))
r<-mean(rbinom(n,1,r_t))
q.vec=c(pi, (1-pi)*p, (1-pi)*(1-p)^(1:5)*p, (1-pi)*(1-p)^6)
r.vec=c((1-r)^c((0:6), 6), r*(1-r)^(0:5))
s.mat=matrix(NA, 14, 8)
s.mat[,1]=c(sen,    (1-sen)*sen,   (1-sen)^2*sen,   (1-sen)^3*sen,     (1-sen)^4*sen,       (1-sen)^5*sen,        (1-sen)^6*sen,       (1-sen)^7,                   spe^0*(1-sen)^(1:6))
s.mat[,2]=c(1-spe,  spe*sen,       spe*(1-sen)*sen, spe*(1-sen)^2*sen, spe*(1-sen)^3*sen,   spe*(1-sen)^4*sen,    spe*(1-sen)^5*sen,    spe*(1-sen)^6,              spe^1*(1-sen)^(0:5))
s.mat[,3]=c(1-spe,  spe*(1-spe),   spe^2*sen,       spe^2*(1-sen)*sen, spe^2*(1-sen)^2*sen, spe^2*(1-sen)^3*sen,  spe^2*(1-sen)^4*sen,  spe^2*(1-sen)^5, spe,       spe^2*(1-sen)^(0:4))
s.mat[,4]=c(1-spe,  spe*(1-spe),   spe^2*(1-spe),   spe^3*sen,         spe^3*(1-sen)*sen,   spe^3*(1-sen)^2*sen,  spe^3*(1-sen)^3*sen,  spe^3*(1-sen)^4, spe^(1:2), spe^3*(1-sen)^(0:3))
s.mat[,5]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*sen,           spe^4*(1-sen)*sen,    spe^4*(1-sen)^2*sen,  spe^4*(1-sen)^3, spe^(1:3), spe^4*(1-sen)^(0:2))
s.mat[,6]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*sen,            spe^5*(1-sen)*sen,    spe^5*(1-sen)^2, spe^(1:4), spe^5*(1-sen)^(0:1))
s.mat[,7]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*(1-spe),        spe^6*sen,            spe^6*(1-sen),   spe^(1:5), spe^6)
s.mat[,8]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*(1-spe),        spe^6*(1-spe),        spe^7,           spe^(1:5), spe^6)
s.mat=t(t(s.mat*r.vec)*q.vec)
final_array<-n*apply(s.mat, 1, sum)
final_array
}
###first try to simulate one senario closest to Track (reall data)
set.seed(556563)
i<-1
input_dat<-func_simulate(n=4000,
sen=sen,
spe=spe,
pi_t=pi,
p_t=p,
r_t=r)
sen<-0.75
spe<-0.999
pi<-0.01
p<-0.01
r<-0.3
input_dat<-func_simulate(n=4000,
sen=sen,
spe=spe,
pi_t=pi,
p_t=p,
r_t=r)
print(paste0("i=",i,"sen=",sen,";spe=",spe,";pi=",pi,";p=",p,";r=",r,sep=""))
input_dat
pi_obs<-input_dat[1]/4000
p_obs_py<-1200*sum(input_dat[2:7])/(input_dat[2]+2*input_dat[3]+3*input_dat[4]+4*input_dat[5]+5*input_dat[6]+6*input_dat[7]+6*input_dat[8]+input_dat[10]+2*input_dat[11]+3*input_dat[12]+4*input_dat[13]+5*input_dat[14])
em_2parameters(nk=input_dat,
pi_init=pi_obs,p_init=p_obs_py/1200,
se=sen, sp=spe,
maxit=1000,tol=1e-6,verbose=F)
library(mlelabperform)
library("devtools")
install_github("isabelweng/mlelabperform",auth_token = "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",force=T)
detach("package:mlelabperform", unload = TRUE)
library("devtools")
install_github("isabelweng/mlelabperform",auth_token = "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",force=T)
library("devtools")
library("roxygen2")
create_package("C:/Users/yweng/Documents/Working/COVID_CZI/Packages/mlelabperform")
library("devtools")
library("roxygen2")
create_package("C:/Users/yweng/Documents/Working/COVID_CZI/Packages/mlelabperform")
install_github("isabelweng/mlelabperform",auth_token = "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",force=T)
methods(mlelabperform)
methods("mlelabperform")
methods("plyr")
methods(mle_ci)
methods(mean)
install_github("isabelweng/mlelabperform",auth_token = "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",force=T)
library(mlelabperform)
mle_ci(pi = 0.07, p = 0.02, nk, se, sp)
## 4000 participants
func_simulate<-function(n=4000,
sen=0.9 ,##fixed
spe=0.99, ##fixed
pi_t=0.05,
p_t=0.02,
r_t=0.05){
pi<-mean(rbinom(n,1,pi_t))
p<-mean(rbinom(n,1,p_t))
r<-mean(rbinom(n,1,r_t))
q.vec=c(pi, (1-pi)*p, (1-pi)*(1-p)^(1:5)*p, (1-pi)*(1-p)^6)
r.vec=c((1-r)^c((0:6), 6), r*(1-r)^(0:5))
s.mat=matrix(NA, 14, 8)
s.mat[,1]=c(sen,    (1-sen)*sen,   (1-sen)^2*sen,   (1-sen)^3*sen,     (1-sen)^4*sen,       (1-sen)^5*sen,        (1-sen)^6*sen,       (1-sen)^7,                   spe^0*(1-sen)^(1:6))
s.mat[,2]=c(1-spe,  spe*sen,       spe*(1-sen)*sen, spe*(1-sen)^2*sen, spe*(1-sen)^3*sen,   spe*(1-sen)^4*sen,    spe*(1-sen)^5*sen,    spe*(1-sen)^6,              spe^1*(1-sen)^(0:5))
s.mat[,3]=c(1-spe,  spe*(1-spe),   spe^2*sen,       spe^2*(1-sen)*sen, spe^2*(1-sen)^2*sen, spe^2*(1-sen)^3*sen,  spe^2*(1-sen)^4*sen,  spe^2*(1-sen)^5, spe,       spe^2*(1-sen)^(0:4))
s.mat[,4]=c(1-spe,  spe*(1-spe),   spe^2*(1-spe),   spe^3*sen,         spe^3*(1-sen)*sen,   spe^3*(1-sen)^2*sen,  spe^3*(1-sen)^3*sen,  spe^3*(1-sen)^4, spe^(1:2), spe^3*(1-sen)^(0:3))
s.mat[,5]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*sen,           spe^4*(1-sen)*sen,    spe^4*(1-sen)^2*sen,  spe^4*(1-sen)^3, spe^(1:3), spe^4*(1-sen)^(0:2))
s.mat[,6]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*sen,            spe^5*(1-sen)*sen,    spe^5*(1-sen)^2, spe^(1:4), spe^5*(1-sen)^(0:1))
s.mat[,7]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*(1-spe),        spe^6*sen,            spe^6*(1-sen),   spe^(1:5), spe^6)
s.mat[,8]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*(1-spe),        spe^6*(1-spe),        spe^7,           spe^(1:5), spe^6)
s.mat=t(t(s.mat*r.vec)*q.vec)
final_array<-n*apply(s.mat, 1, sum)
final_array
}
set.seed(556563)
sen<-0.75
spe<-0.999
pi<-0.01
p<-0.01
r<-0.3
data_simulated_track<-data.frame()
input_dat<-func_simulate(n=4000,
sen=sen,
spe=spe,
pi_t=pi,
p_t=p,
r_t=r)
print(paste0("i=",i,";sen=",sen,";spe=",spe,";pi=",pi,";p=",p,";r=",r,sep=""))
pi_obs<-input_dat[1]/4000
p_obs_py<-1200*sum(input_dat[2:7])/(input_dat[2]+2*input_dat[3]+3*input_dat[4]+4*input_dat[5]+5*input_dat[6]+6*input_dat[7]+6*input_dat[8]+input_dat[10]+2*input_dat[11]+3*input_dat[12]+4*input_dat[13]+5*input_dat[14])
p_obs_py
input_dat
input_dat
em_2parameters(nk=input_dat,
pi_init=pi_obs,p_init=p_obs_py/1200,
se=sen, sp=spe,
maxit=1000,tol=1e-6,verbose=F)
library("devtools")
detach("package:mlelabperform", unload = TRUE)
detach("package:devtools", unload = TRUE)
install.packages("devtools")
library("devtools")
install_github("isabelweng/mlelabperform",auth_token = "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",force=T)
library("devtools")
library("devtools")
install_github("isabelweng/mlelabperform",auth_token = "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",force=T)
library(mlelabperform)
detach("package:mlelabperform", unload = TRUE)
devtools::install("C:/Users/yweng/Documents/Working/COVID_CZI/Packages/mlelabperform")
library(mlelabperform)
func_simulate<-function(n=4000,
sen=0.9 ,##fixed
spe=0.99, ##fixed
pi_t=0.05,
p_t=0.02,
r_t=0.05){
pi<-mean(rbinom(n,1,pi_t))
p<-mean(rbinom(n,1,p_t))
r<-mean(rbinom(n,1,r_t))
q.vec=c(pi, (1-pi)*p, (1-pi)*(1-p)^(1:5)*p, (1-pi)*(1-p)^6)
r.vec=c((1-r)^c((0:6), 6), r*(1-r)^(0:5))
s.mat=matrix(NA, 14, 8)
s.mat[,1]=c(sen,    (1-sen)*sen,   (1-sen)^2*sen,   (1-sen)^3*sen,     (1-sen)^4*sen,       (1-sen)^5*sen,        (1-sen)^6*sen,       (1-sen)^7,                   spe^0*(1-sen)^(1:6))
s.mat[,2]=c(1-spe,  spe*sen,       spe*(1-sen)*sen, spe*(1-sen)^2*sen, spe*(1-sen)^3*sen,   spe*(1-sen)^4*sen,    spe*(1-sen)^5*sen,    spe*(1-sen)^6,              spe^1*(1-sen)^(0:5))
s.mat[,3]=c(1-spe,  spe*(1-spe),   spe^2*sen,       spe^2*(1-sen)*sen, spe^2*(1-sen)^2*sen, spe^2*(1-sen)^3*sen,  spe^2*(1-sen)^4*sen,  spe^2*(1-sen)^5, spe,       spe^2*(1-sen)^(0:4))
s.mat[,4]=c(1-spe,  spe*(1-spe),   spe^2*(1-spe),   spe^3*sen,         spe^3*(1-sen)*sen,   spe^3*(1-sen)^2*sen,  spe^3*(1-sen)^3*sen,  spe^3*(1-sen)^4, spe^(1:2), spe^3*(1-sen)^(0:3))
s.mat[,5]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*sen,           spe^4*(1-sen)*sen,    spe^4*(1-sen)^2*sen,  spe^4*(1-sen)^3, spe^(1:3), spe^4*(1-sen)^(0:2))
s.mat[,6]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*sen,            spe^5*(1-sen)*sen,    spe^5*(1-sen)^2, spe^(1:4), spe^5*(1-sen)^(0:1))
s.mat[,7]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*(1-spe),        spe^6*sen,            spe^6*(1-sen),   spe^(1:5), spe^6)
s.mat[,8]=c(1-spe,  spe*(1-spe)  , spe^2*(1-spe),   spe^3*(1-spe),     spe^4*(1-spe),       spe^5*(1-spe),        spe^6*(1-spe),        spe^7,           spe^(1:5), spe^6)
s.mat=t(t(s.mat*r.vec)*q.vec)
final_array<-n*apply(s.mat, 1, sum)
final_array
}
###first try to simulate one senario closest to Track (reall data)
set.seed(556563)
sen<-0.75
spe<-0.999
pi<-0.01
p<-0.01
r<-0.3
input_dat<-func_simulate(n=4000,
sen=sen,
spe=spe,
pi_t=pi,
p_t=p,
r_t=r)
print(paste0("i=",i,";sen=",sen,";spe=",spe,";pi=",pi,";p=",p,";r=",r,sep=""))
pi_obs<-input_dat[1]/4000
p_obs_py<-1200*sum(input_dat[2:7])/(input_dat[2]+2*input_dat[3]+3*input_dat[4]+4*input_dat[5]+5*input_dat[6]+6*input_dat[7]+6*input_dat[8]+input_dat[10]+2*input_dat[11]+3*input_dat[12]+4*input_dat[13]+5*input_dat[14])
startTime <- Sys.time()
point_estimates<-em_2parameters(nk=input_dat,
pi_init=pi_obs,p_init=p_obs_py/1200,
se=sen, sp=spe,
maxit=1000,tol=1e-6,verbose=F)
print(point_estimates)
###Wrap up a package
install.packages(c("devtools", "roxygen2"))  # installations can be `c`ombined
library("devtools")
library("roxygen2")
create_package("C:/Users/yweng/Documents/Working/COVID_CZI/Packages/mlelabperform")
install.packages(c("devtools", "roxygen2"))
library("devtools")
library("roxygen2")
create_package("C:/Users/yweng/Documents/Working/COVID_CZI/Packages/mlelabperform")
document()
setwd("C:/Users/yweng/Documents/Working/COVID_CZI/Packages/mlelabperform")
document()
